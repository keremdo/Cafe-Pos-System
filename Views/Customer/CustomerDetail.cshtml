@model Customer 

@{
    var className = Model.CustomerBalance >= 1 ? "danger":"primary";
    var isBalance = Model.CustomerBalance  >= 1 ? "Borçlu Müşteri" : "Borçsuz Müşteri";
}

<style>
    .receipt {
        width: 200mm;
        padding: 20px;
        font-size: 50px;
        color: black;
        font-weight: bold;
        border: 2px solid #000;
        margin: 0 auto;
    }

</style>

<style media="print">
    body * {
        visibility: hidden;
    }
    #receipt, #receipt * {
        visibility: visible;
    }
</style>
<div id="receipt" class="receipt" style="display:none;">
    <p>Müşteri Adı-Soyadı: <span id="customerName"></span></p>
    <p>Müşteri Borç: <span id="customerBalance"></span>₺</p>
    <p>Ödeme Tutarı: <span id="receiptAmount"></span>₺</p>
    <p>Müşteri Kalan Borç: <span id="receiptAmount2"></span>₺</p>
    <p>Tarih: <span id="receiptDate"></span></p>
</div>

<div class="row">
    <div class="col-lg-4"></div>
    <div class="col-lg-4">
        <main class="text-center">
            <div class="card mb-4">
                <div class="card-header">
                    <h1 class="h4">Müşteri Detayı</h1>
                </div>
                <div class="card-body">
                    <p>
                        <span class="badge badge-@className">@isBalance</span>
                    </p>
                    <p>Müşteri Adı Soyadı : @Model.CustomerFullName</p>
                    <p>Müşteri Borcu : @Model.CustomerBalance.ToString("F2")₺</p>
                </div>
            </div>
        
            <div class="card">
                <div class="container mb-5">
                    <div class="card">
                        <div class="card-header">
                            <h2>Hesaptan Düş</h2>
                        </div>
                        <div class="card-body">
                            <h3 class="card-text text-danger">Girdiğiniz tutar toplam tutardan düşecektir</h3>
                            <form id="payingForm" asp-route-customerId="@Model.CustomerId" asp-controller="Customer" asp-action="PayingToBalance" method="post" onsubmit="return confirmAndCheckPayment()">
                                <div class="form-group row">
                                    <div class="col-sm-6">
                                        <input id="paymentAmount" type="number" class="form-control" name="price" placeholder="Ödeme Tutarı Girin">
                                    </div>
                                    <div class="col-sm-2">
                                        <button type="submit" class="btn btn-primary">Ödeme Al</button>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col-sm-6">
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" id="creditCard" value="creditCard" name="paymentMethod">
                                            <label class="form-check-label" for="creditCard">
                                                Kredi Kartı ile Ödeme
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <div class="col-lg-4"></div>
</div>



<script>

function confirmAndCheckPayment() {
            // Model.CustomerBalance değerini Razor'dan al ve bir değişkene ata
            var customerBalance = parseFloat('@Model.CustomerBalance');
            // Kullanıcının girdiği ödeme tutarını al
            var paymentAmount = parseFloat(document.getElementById('paymentAmount').value);
            var customerNewBalance = customerBalance -  paymentAmount;
            var customerName = '@Model.CustomerFullName'.toString();
            

            // Ödeme tutarının müşteri bakiyesinden büyük olup olmadığını kontrol et
            if (paymentAmount > customerBalance) {
                // Uyarı göster ve formun submit edilmesini engelle
                alert('Borçtan fazla ödeme alınamaz.');
                return false;
            }

            // Onay mesajı
            var confirmed = confirm("Tutar Müşteri Borcundan Düşülecek Emin misiniz?");
            if (!confirmed) {
                return false;
            }

            // Fiş bilgilerini ayarla
            document.getElementById('customerName').innerText = customerName
            document.getElementById('receiptAmount').innerText = paymentAmount.toFixed(2);
            document.getElementById('customerBalance').innerText = customerBalance.toFixed(2);
            document.getElementById('receiptAmount2').innerText = customerNewBalance.toFixed(2);
            
            document.getElementById('receiptDate').innerText = new Date().toLocaleDateString();

            // Fişi göster
            document.getElementById('receipt').style.display = 'block';

            // Fişi yazdır
            window.print();

            // Formun submit edilmesini geciktir
            setTimeout(function() {
                document.getElementById('payingForm').submit();
            }, 1000); // 1 saniye gecikme

            return false; // Formun hemen submit edilmesini engelle
        }


    
</script>
